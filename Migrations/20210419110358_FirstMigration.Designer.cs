// <auto-generated />
using System;
using IssueTrackingSystem.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace IssueTrackingSystem.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20210419110358_FirstMigration")]
    partial class FirstMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("IssueTrackingSystem.Models.Account.Registration", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("UserId");

                    b.ToTable("Registrations");
                });

            modelBuilder.Entity("IssueTrackingSystem.Models.IssueBase.Comments", b =>
                {
                    b.Property<int>("CommentsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("HostId")
                        .HasColumnType("int");

                    b.Property<int>("IssueId")
                        .HasColumnType("int");

                    b.HasKey("CommentsId");

                    b.HasIndex("HostId");

                    b.HasIndex("IssueId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("IssueTrackingSystem.Models.IssueBase.Issue", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("HostId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("id");

                    b.HasIndex("HostId");

                    b.ToTable("Issues");
                });

            modelBuilder.Entity("IssueTrackingSystem.Models.IssueBase.LabelIssues", b =>
                {
                    b.Property<int>("LabelIssueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IssueId")
                        .HasColumnType("int");

                    b.Property<int>("LabelId")
                        .HasColumnType("int");

                    b.HasKey("LabelIssueId");

                    b.HasIndex("IssueId");

                    b.HasIndex("LabelId");

                    b.ToTable("LabelIssues");
                });

            modelBuilder.Entity("IssueTrackingSystem.Models.IssueBase.Labels", b =>
                {
                    b.Property<int>("LabelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("LabelId");

                    b.ToTable("Labels");
                });

            modelBuilder.Entity("IssueTrackingSystem.Models.IssueBase.UserIssues", b =>
                {
                    b.Property<int>("UserIssueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AssignedId")
                        .HasColumnType("int");

                    b.Property<int>("IssueId")
                        .HasColumnType("int");

                    b.HasKey("UserIssueId");

                    b.HasIndex("AssignedId");

                    b.HasIndex("IssueId");

                    b.ToTable("UserIssues");
                });

            modelBuilder.Entity("IssueTrackingSystem.Models.IssueBase.Comments", b =>
                {
                    b.HasOne("IssueTrackingSystem.Models.Account.Registration", "Host")
                        .WithMany("AllIssuesCommented")
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IssueTrackingSystem.Models.IssueBase.Issue", "Issue")
                        .WithMany("AllComments")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IssueTrackingSystem.Models.IssueBase.Issue", b =>
                {
                    b.HasOne("IssueTrackingSystem.Models.Account.Registration", "Host")
                        .WithMany()
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IssueTrackingSystem.Models.IssueBase.LabelIssues", b =>
                {
                    b.HasOne("IssueTrackingSystem.Models.IssueBase.Issue", "Issue")
                        .WithMany("AllLabels")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IssueTrackingSystem.Models.IssueBase.Labels", "Labels")
                        .WithMany("AllIssuesLabeled")
                        .HasForeignKey("LabelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IssueTrackingSystem.Models.IssueBase.UserIssues", b =>
                {
                    b.HasOne("IssueTrackingSystem.Models.Account.Registration", "Assigned")
                        .WithMany("AllAssignedIssues")
                        .HasForeignKey("AssignedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IssueTrackingSystem.Models.IssueBase.Issue", "Issue")
                        .WithMany("AllAssigned")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
